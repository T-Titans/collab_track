{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\OWETHU_PEYANE\\\\collab_track\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI, storeAuthData, clearAuthData, getStoredUser, getStoredToken } from '../lib/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // On mount, try to restore auth from localStorage and validate token\n    (async () => {\n      const storedUser = getStoredUser();\n      const token = getStoredToken();\n      if (storedUser && token) {\n        // restore axios header and validate token by fetching profile\n        storeAuthData(storedUser, token);\n        try {\n          const res = await authAPI.getProfile();\n          setUser(res.user || storedUser);\n        } catch (err) {\n          // invalid/expired token\n          clearAuthData();\n          setUser(null);\n        }\n      }\n      setIsLoading(false);\n    })();\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    try {\n      const res = await authAPI.login(email, password);\n      storeAuthData(res.user, res.accessToken);\n      setUser(res.user);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      throw new Error((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || (err === null || err === void 0 ? void 0 : err.message) || 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    clearAuthData();\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authAPI","storeAuthData","clearAuthData","getStoredUser","getStoredToken","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","storedUser","token","res","getProfile","err","login","email","password","accessToken","_err$response","_err$response$data","Error","response","data","message","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/USER/Documents/OWETHU_PEYANE/collab_track/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\r\nimport { authAPI, storeAuthData, clearAuthData, getStoredUser, getStoredToken, User } from '../lib/auth';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // On mount, try to restore auth from localStorage and validate token\r\n    (async () => {\r\n      const storedUser = getStoredUser();\r\n      const token = getStoredToken();\r\n\r\n      if (storedUser && token) {\r\n        // restore axios header and validate token by fetching profile\r\n        storeAuthData(storedUser, token);\r\n        try {\r\n          const res = await authAPI.getProfile();\r\n          setUser(res.user || storedUser);\r\n        } catch (err) {\r\n          // invalid/expired token\r\n          clearAuthData();\r\n          setUser(null);\r\n        }\r\n      }\r\n\r\n      setIsLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await authAPI.login(email, password);\r\n      storeAuthData(res.user, res.accessToken);\r\n      setUser(res.user);\r\n    } catch (err: any) {\r\n      throw new Error(err?.response?.data?.message || err?.message || 'Login failed');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    clearAuthData();\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}