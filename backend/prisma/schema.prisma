// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  role      Role     @default(TEAM_MEMBER)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  // Relations
  createdProjects     Project[]           @relation("ProjectCreator")
  projectMemberships  ProjectMember[]
  assignedTasks       Task[]              @relation("TaskAssignee")
  createdTasks        Task[]              @relation("TaskCreator")
  comments            Comment[]
  notifications       Notification[]
  timeEntries         TimeEntry[]
  sentInvites         ProjectInvite[]     @relation("InviteSender")
  receivedInvites     ProjectInvite[]     @relation("InviteReceiver")
  uploadedFiles       Attachment[]
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      ProjectStatus @default(ACTIVE)
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @db.ObjectId

  // Relations
  creator     User            @relation("ProjectCreator", fields: [createdBy], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  invites     ProjectInvite[]
}

model ProjectMember {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  projectId String        @db.ObjectId
  role      ProjectRole   @default(MEMBER)
  joinedAt  DateTime      @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  status        TaskStatus  @default(BACKLOG)
  priority      Priority    @default(MEDIUM)
  dueDate       DateTime?
  estimatedTime Int?        // in minutes
  timeSpent     Int         @default(0) // in minutes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectId     String      @db.ObjectId
  assignedTo    String?     @db.ObjectId
  createdBy     String      @db.ObjectId

  // Relations
  project       Project       @relation(fields: [projectId], references: [id])
  assignee      User?         @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator       User          @relation("TaskCreator", fields: [createdBy], references: [id])
  comments      Comment[]
  attachments   Attachment[]
  timeEntries   TimeEntry[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String   @db.ObjectId
  authorId  String   @db.ObjectId

  // Relations
  task      Task @relation(fields: [taskId], references: [id])
  author    User @relation(fields: [authorId], references: [id])
}

model Attachment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())
  taskId       String   @db.ObjectId
  uploadedBy   String   @db.ObjectId

  // Relations
  task         Task @relation(fields: [taskId], references: [id])
  uploader     User @relation(fields: [uploadedBy], references: [id])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  relatedId String?          // taskId, projectId, etc.
  createdAt DateTime         @default(now())
  userId    String           @db.ObjectId

  // Relations
  user      User @relation(fields: [userId], references: [id])
}

model TimeEntry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  duration    Int      // in minutes
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  taskId      String   @db.ObjectId
  userId      String   @db.ObjectId

  // Relations
  task        Task @relation(fields: [taskId], references: [id])
  user        User @relation(fields: [userId], references: [id])
}

model ProjectInvite {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  role      ProjectRole   @default(MEMBER)
  status    InviteStatus  @default(PENDING)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  projectId String        @db.ObjectId
  invitedBy String        @db.ObjectId
  userId    String?       @db.ObjectId // Set when user accepts invite

  // Relations
  project   Project @relation(fields: [projectId], references: [id])
  sender    User    @relation("InviteSender", fields: [invitedBy], references: [id])
  receiver  User?   @relation("InviteReceiver", fields: [userId], references: [id])
}

// Enums
enum Role {
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  COMMENT_ADDED
  PROJECT_INVITE
  DEADLINE_APPROACHING
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

